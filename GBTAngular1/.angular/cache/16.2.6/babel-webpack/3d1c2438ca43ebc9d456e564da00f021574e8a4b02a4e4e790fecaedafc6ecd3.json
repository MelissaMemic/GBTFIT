{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, switchMap, throwError } from 'rxjs';\nimport { TokenApiModel } from 'src/app/models/token-api.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/auth.service\";\nimport * as i2 from \"ng-angular-popup\";\nimport * as i3 from \"@angular/router\";\nexport let TokenInterceptor = /*#__PURE__*/(() => {\n  class TokenInterceptor {\n    constructor(auth, toast, route) {\n      this.auth = auth;\n      this.toast = toast;\n      this.route = route;\n    }\n    intercept(request, next) {\n      const myToken = this.auth.getToken();\n      if (myToken) {\n        request = request.clone({\n          setHeaders: {\n            Authorization: `Bearer ${myToken}`\n          }\n        });\n      }\n      return next.handle(request).pipe(catchError(err => {\n        if (err instanceof HttpErrorResponse) {\n          if (err.status == 401) {\n            // this.toast.warning({detail:\"Warning\",summary:\"This token is expired, Login again!\"});\n            // this.route.navigate(['login']);\n            return this.handleUnAuthorizedError(request, next);\n          }\n        }\n        return throwError(() => err);\n      }));\n    }\n    handleUnAuthorizedError(req, next) {\n      let tokenApiModel = new TokenApiModel();\n      tokenApiModel.accessToken = this.auth.getToken();\n      tokenApiModel.refreshToken = this.auth.getRefreshedToken();\n      return this.auth.renewToken(tokenApiModel).pipe(switchMap(data => {\n        this.auth.storeRefreshToken(data.refreshToken);\n        this.auth.storeToken(data.accessToken);\n        req = req.clone({\n          setHeaders: {\n            Authorization: `Bearer ${data.accessToken}`\n          }\n        });\n        return next.handle(req);\n      }), catchError(err => {\n        return throwError(() => {\n          this.toast.warning({\n            detail: \"Warning\",\n            summary: \"This token is expired, Login again!\"\n          });\n          this.route.navigate(['login']);\n        });\n      }));\n    }\n    static #_ = this.ɵfac = function TokenInterceptor_Factory(t) {\n      return new (t || TokenInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.NgToastService), i0.ɵɵinject(i3.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TokenInterceptor,\n      factory: TokenInterceptor.ɵfac\n    });\n  }\n  return TokenInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}