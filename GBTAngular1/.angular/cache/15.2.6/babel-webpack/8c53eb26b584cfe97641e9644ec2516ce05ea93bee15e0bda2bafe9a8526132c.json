{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.baseUrl = \"https://localhost:7219/Autentification/\";\n  }\n  signUp(signUpObject) {\n    return this.http.post(`${this.baseUrl}register`, signUpObject);\n  }\n  storeRefreshToken(tokenValue) {\n    localStorage.setItem('refreshToken', tokenValue);\n  }\n  login(loginObj) {\n    return this.http.post(`${this.baseUrl}authenticate`, loginObj);\n  }\n  signOut() {\n    localStorage.clear();\n    this.router.navigate(['login']);\n  }\n  storeToken(tokenValue) {\n    localStorage.setItem('token', tokenValue);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  getRefreshedToken() {\n    return localStorage.getItem('refreshToken');\n  }\n  isLoggedIn() {\n    return !!localStorage.getItem('token');\n  }\n  renewToken(tokenApi) {\n    return this.http.post(`${this.baseUrl}refresh`, tokenApi);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,WAAW;EAEtBC,YAAoBC,IAAiB,EAAUC,MAAc;IAAzC,SAAI,GAAJD,IAAI;IAAuB,WAAM,GAANC,MAAM;IAD/C,YAAO,GAAQ,yCAAyC;EACG;EAEnEC,MAAM,CAACC,YAAgB;IACrB,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAM,GAAG,IAAI,CAACC,OAAO,UAAU,EAACF,YAAY,CAAC;EACpE;EAEAG,iBAAiB,CAACC,UAAiB;IACjCC,YAAY,CAACC,OAAO,CAAC,cAAc,EAACF,UAAU,CAAC;EAEjD;EAEAG,KAAK,CAACC,QAAY;IAChB,OAAO,IAAI,CAACX,IAAI,CAACI,IAAI,CAAM,GAAG,IAAI,CAACC,OAAO,cAAc,EAACM,QAAQ,CAAC;EACpE;EACAC,OAAO;IACLJ,YAAY,CAACK,KAAK,EAAE;IACtB,IAAI,CAACZ,MAAM,CAACa,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;EAE/B;EACAC,UAAU,CAACR,UAAiB;IAC1BC,YAAY,CAACC,OAAO,CAAC,OAAO,EAACF,UAAU,CAAC;EAC1C;EACAS,QAAQ;IACN,OAAOR,YAAY,CAACS,OAAO,CAAC,OAAO,CAAC;EACtC;EACAC,iBAAiB;IACf,OAAOV,YAAY,CAACS,OAAO,CAAC,cAAc,CAAC;EAC7C;EAEAE,UAAU;IACV,OAAO,CAAC,CAACX,YAAY,CAACS,OAAO,CAAC,OAAO,CAAC;EACtC;EACAG,UAAU,CAACC,QAAuB;IAClC,OAAO,IAAI,CAACrB,IAAI,CAACI,IAAI,CAAM,GAAG,IAAI,CAACC,OAAO,SAAS,EAACgB,QAAQ,CAAC;EAC7D;;AApCavB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAwB,SAAXxB,WAAW;EAAAyB,YAFV;AAAM","names":["AuthService","constructor","http","router","signUp","signUpObject","post","baseUrl","storeRefreshToken","tokenValue","localStorage","setItem","login","loginObj","signOut","clear","navigate","storeToken","getToken","getItem","getRefreshedToken","isLoggedIn","renewToken","tokenApi","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\hanam\\Desktop\\RS1\\GBTFIT\\GBTAngular1\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { TokenApiModel } from '../models/token-api.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\nprivate baseUrl:string=\"https://localhost:7219/Autentification/\";\r\n  constructor(private http : HttpClient ,private router: Router) { }\r\n\r\nsignUp(signUpObject:any){\r\n  return this.http.post<any>(`${this.baseUrl}register`,signUpObject); \r\n}\r\n\r\nstoreRefreshToken(tokenValue:string){\r\n  localStorage.setItem('refreshToken',tokenValue)\r\n\r\n}\r\n\r\nlogin(loginObj:any){\r\n  return this.http.post<any>(`${this.baseUrl}authenticate`,loginObj); \r\n}\r\nsignOut(){\r\n  localStorage.clear();\r\nthis.router.navigate(['login'])\r\n\r\n}\r\nstoreToken(tokenValue:string){\r\n  localStorage.setItem('token',tokenValue)\r\n}\r\ngetToken(){\r\n  return localStorage.getItem('token')\r\n}\r\ngetRefreshedToken(){\r\n  return localStorage.getItem('refreshToken')\r\n}\r\n\r\nisLoggedIn():boolean{\r\nreturn !!localStorage.getItem('token')\r\n}\r\nrenewToken(tokenApi: TokenApiModel){\r\nreturn this.http.post<any>(`${this.baseUrl}refresh`,tokenApi)\r\n}\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}