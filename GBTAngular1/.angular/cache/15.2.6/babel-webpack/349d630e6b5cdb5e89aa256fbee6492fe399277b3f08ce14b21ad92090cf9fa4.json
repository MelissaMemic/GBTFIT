{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"ng-angular-popup\";\nexport class SignupComponent {\n  constructor(sf, auth, router, toast) {\n    this.sf = sf;\n    this.auth = auth;\n    this.router = router;\n    this.toast = toast;\n    this.type = \"password\";\n    this.isText = false;\n    this.eyeIcon = \"fa-eye-slash\";\n  }\n  ngOnInit() {\n    this.signUpForm = this.sf.group({\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', Validators.required],\n      password: ['', Validators.required],\n      userName: ['', Validators.required]\n    });\n  }\n  hideShowPass() {\n    this.isText = !this.isText;\n    this.isText ? this.eyeIcon = \"fa-eye\" : this.eyeIcon = \"fa-eye-slash\";\n    this.isText ? this.type = \"text\" : this.type = \"password\";\n  }\n  onSignUp() {\n    if (this.signUpForm.valid) {\n      this.auth.signUp(this.signUpForm.valid).subscribe({\n        next: res => {\n          this.signUpForm.reset();\n          this.toast.success({\n            detail: \"SUCCESS\",\n            summary: res.message,\n            duration: 5000\n          });\n          this.router.navigate(['dashboard']);\n        },\n        error: err => {\n          this.toast.error({\n            detail: \"ERROR\",\n            summary: \"Something went wrong!\",\n            duration: 5000\n          });\n        }\n      });\n    } else {\n      this.validateAllFormFields(this.signUpForm);\n    }\n  }\n  validateAllFormFields(formGroup) {\n    Object.keys(formGroup.controls).forEach(field => {\n      const control = formGroup.get(field);\n      if (control instanceof FormControl) {\n        control.markAsDirty({\n          onlySelf: true\n        });\n      } else if (control instanceof FormGroup) {\n        this.validateAllFormFields(control);\n      }\n    });\n  }\n}\nSignupComponent.ɵfac = function SignupComponent_Factory(t) {\n  return new (t || SignupComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.NgToastService));\n};\nSignupComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SignupComponent,\n  selectors: [[\"app-signup\"]],\n  decls: 0,\n  vars: 0,\n  template: function SignupComponent_Template(rf, ctx) {},\n  styles: [\".outer[_ngcontent-%COMP%]{\\n    background-image:url(\\\"train1.jpg\\\"); \\n    background-position: center;\\n    background-repeat:no-repeat; \\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9zaWdudXAvc2lnbnVwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxrQ0FBa0M7SUFDbEMsMkJBQTJCO0lBQzNCLDJCQUEyQjtFQUM3QiIsInNvdXJjZXNDb250ZW50IjpbIi5vdXRlcntcbiAgICBiYWNrZ3JvdW5kLWltYWdlOnVybChcInRyYWluMS5qcGdcIik7IFxuICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7IFxuICB9XG4gICJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"AACA,SAAsBA,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;;;;;;AAUhF,OAAM,MAAOC,eAAe;EAMxBC,YACUC,EAAc,EACdC,IAAiB,EACjBC,MAAc,EACdC,KAAoB;IAHpB,OAAE,GAAFH,EAAE;IACF,SAAI,GAAJC,IAAI;IACJ,WAAM,GAANC,MAAM;IACN,UAAK,GAALC,KAAK;IATjB,SAAI,GAAQ,UAAU;IACtB,WAAM,GAAS,KAAK;IACpB,YAAO,GAAS,cAAc;EAS9B;EACAC,QAAQ;IACN,IAAI,CAACC,UAAU,GAAC,IAAI,CAACL,EAAE,CAACM,KAAK,CAAC;MAC5BC,SAAS,EAAC,CAAC,EAAE,EAACV,UAAU,CAACW,QAAQ,CAAC;MAClCC,QAAQ,EAAC,CAAC,EAAE,EAACZ,UAAU,CAACW,QAAQ,CAAC;MACjCE,KAAK,EAAC,CAAC,EAAE,EAACb,UAAU,CAACW,QAAQ,CAAC;MAC9BG,QAAQ,EAAC,CAAC,EAAE,EAACd,UAAU,CAACW,QAAQ,CAAC;MACjCI,QAAQ,EAAC,CAAC,EAAE,EAACf,UAAU,CAACW,QAAQ;KACjC,CAAC;EAEJ;EACAK,YAAY;IACZ,IAAI,CAACC,MAAM,GAAE,CAAC,IAAI,CAACA,MAAM;IACzB,IAAI,CAACA,MAAM,GAAG,IAAI,CAACC,OAAO,GAAC,QAAQ,GAAC,IAAI,CAACA,OAAO,GAAC,cAAc;IAC/D,IAAI,CAACD,MAAM,GAAG,IAAI,CAACE,IAAI,GAAC,MAAM,GAAC,IAAI,CAACA,IAAI,GAAC,UAAU;EACnD;EACAC,QAAQ;IACN,IAAG,IAAI,CAACZ,UAAU,CAACa,KAAK,EAAC;MACvB,IAAI,CAACjB,IAAI,CAACkB,MAAM,CAAC,IAAI,CAACd,UAAU,CAACa,KAAK,CAAC,CAACE,SAAS,CAAC;QAChDC,IAAI,EAAEC,GAAG,IAAG;UACV,IAAI,CAACjB,UAAU,CAACkB,KAAK,EAAE;UACvB,IAAI,CAACpB,KAAK,CAACqB,OAAO,CAAC;YAACC,MAAM,EAAC,SAAS;YAAEC,OAAO,EAACJ,GAAG,CAACK,OAAO;YAAEC,QAAQ,EAAC;UAAI,CAAC,CAAC;UAC1E,IAAI,CAAC1B,MAAM,CAAC2B,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC;QACrC,CAAC;QACDC,KAAK,EAAEC,GAAG,IAAG;UACX,IAAI,CAAC5B,KAAK,CAAC2B,KAAK,CAAC;YAACL,MAAM,EAAC,OAAO;YAAEC,OAAO,EAAC,uBAAuB;YAAEE,QAAQ,EAAC;UAAI,CAAC,CAAC;QACpF;OACD,CAAC;KAEH,MAAI;MACP,IAAI,CAACI,qBAAqB,CAAC,IAAI,CAAC3B,UAAU,CAAC;;EAE3C;EAEQ2B,qBAAqB,CAACC,SAAmB;IACnDC,MAAM,CAACC,IAAI,CAACF,SAAS,CAACG,QAAQ,CAAC,CAACC,OAAO,CAACC,KAAK,IAAE;MAC7C,MAAMC,OAAO,GAAEN,SAAS,CAACO,GAAG,CAACF,KAAK,CAAC;MACnC,IAAGC,OAAO,YAAY5C,WAAW,EAAC;QAChC4C,OAAO,CAACE,WAAW,CAAC;UAACC,QAAQ,EAAC;QAAI,CAAC,CAAC;OACrC,MAAK,IAAGH,OAAO,YAAY3C,SAAS,EAAC;QACpC,IAAI,CAACoC,qBAAqB,CAACO,OAAO,CAAC;;IAEvC,CAAC,CAAC;EACA;;AAvDWzC,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;QAAfA,eAAe;EAAA6C;EAAAC;EAAAC;EAAAC;EAAAC;AAAA","names":["FormControl","FormGroup","Validators","SignupComponent","constructor","sf","auth","router","toast","ngOnInit","signUpForm","group","firstName","required","lastName","email","password","userName","hideShowPass","isText","eyeIcon","type","onSignUp","valid","signUp","subscribe","next","res","reset","success","detail","summary","message","duration","navigate","error","err","validateAllFormFields","formGroup","Object","keys","controls","forEach","field","control","get","markAsDirty","onlySelf","selectors","decls","vars","template","styles"],"sourceRoot":"","sources":["/Users/melissa/Desktop/GBTFIT/GBTAngular1/src/app/components/signup/signup.component.ts"],"sourcesContent":["import { Component,OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { NgToastService } from 'ng-angular-popup';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit{\n  type:string=\"password\";\n  isText:boolean=false;\n  eyeIcon: string=\"fa-eye-slash\";\n  signUpForm!:FormGroup;\n\n    constructor(\n      private sf:FormBuilder,\n      private auth: AuthService,\n      private router: Router,\n      private toast:NgToastService){\n  \n  }\n  ngOnInit(): void {\n    this.signUpForm=this.sf.group({\n      firstName:['',Validators.required],\n      lastName:['',Validators.required],\n      email:['',Validators.required],\n      password:['',Validators.required],\n      userName:['',Validators.required]\n    })\n    \n  }\n  hideShowPass(){\n  this.isText= !this.isText;\n  this.isText ? this.eyeIcon=\"fa-eye\":this.eyeIcon=\"fa-eye-slash\";\n  this.isText ? this.type=\"text\":this.type=\"password\";\n  }\n  onSignUp(){\n    if(this.signUpForm.valid){\n      this.auth.signUp(this.signUpForm.valid).subscribe({\n        next:(res)=>{\n          this.signUpForm.reset();\n          this.toast.success({detail:\"SUCCESS\", summary:res.message, duration:5000});\n          this.router.navigate(['dashboard']);\n        },\n        error:(err)=>{\n          this.toast.error({detail:\"ERROR\", summary:\"Something went wrong!\", duration:5000});\n        }\n      })\n\n    }else{\n  this.validateAllFormFields(this.signUpForm);\n    }\n  }\n\n  private validateAllFormFields(formGroup:FormGroup){\nObject.keys(formGroup.controls).forEach(field=>{\n  const control= formGroup.get(field);\n  if(control instanceof FormControl){\n    control.markAsDirty({onlySelf:true});\n  }else if(control instanceof FormGroup){\n    this.validateAllFormFields(control);\n  }\n})\n  }\n\n  }\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}