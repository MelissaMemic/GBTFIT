{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/auth.service\";\nimport * as i2 from \"ng-angular-popup\";\nimport * as i3 from \"@angular/router\";\nexport class TokenInterceptor {\n  constructor(auth, toast, route) {\n    this.auth = auth;\n    this.toast = toast;\n    this.route = route;\n  }\n  intercept(request, next) {\n    const myToken = this.auth.getToken();\n    if (myToken) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${myToken}`\n        }\n      });\n    }\n    return next.handle(request).pipe(catchError(err => {\n      if (err instanceof HttpErrorResponse) {\n        if (err.status == 401) {\n          this.toast.warning({\n            detail: \"Warning\",\n            summary: \"This token is expired, Login again!\"\n          });\n          this.route.navigate(['login']);\n        }\n      }\n      return throwError(() => new Error(\"Some message for login error\"));\n    }));\n  }\n}\nTokenInterceptor.ɵfac = function TokenInterceptor_Factory(t) {\n  return new (t || TokenInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.NgToastService), i0.ɵɵinject(i3.Router));\n};\nTokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TokenInterceptor,\n  factory: TokenInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAKEA,iBAAiB,QACZ,sBAAsB;AAC7B,SAAqBC,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;;;AAMzD,OAAM,MAAOC,gBAAgB;EAE3BC,YAAoBC,IAAkB,EAASC,KAAoB,EAASC,KAAY;IAApE,SAAI,GAAJF,IAAI;IAAuB,UAAK,GAALC,KAAK;IAAwB,UAAK,GAALC,KAAK;EAAU;EAE3FC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,MAAMC,OAAO,GAAC,IAAI,CAACN,IAAI,CAACO,QAAQ,EAAE;IAClC,IAAGD,OAAO,EAAC;MACTF,OAAO,GAACA,OAAO,CAACI,KAAK,CAAC;QACpBC,UAAU,EAAC;UAACC,aAAa,EAAC,UAAUJ,OAAO;QAAE;OAC9C,CAAC;;IAEJ,OAAOD,IAAI,CAACM,MAAM,CAACP,OAAO,CAAC,CAACQ,IAAI,CAC9BhB,UAAU,CAAEiB,GAAO,IAAG;MACtB,IAAGA,GAAG,YAAYlB,iBAAiB,EAAC;QAClC,IAAGkB,GAAG,CAACC,MAAM,IAAE,GAAG,EAAC;UACjB,IAAI,CAACb,KAAK,CAACc,OAAO,CAAC;YAACC,MAAM,EAAC,SAAS;YAACC,OAAO,EAAC;UAAqC,CAAC,CAAC;UACpF,IAAI,CAACf,KAAK,CAACgB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;;;MAGlC,OAAOrB,UAAU,CAAC,MAAI,IAAIsB,KAAK,CAAC,8BAA8B,CAAC,CAAC;IAClE,CAAC,CAAC,CAAC;EACL;;AArBWrB,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAsB,SAAhBtB,gBAAgB;AAAA","names":["HttpErrorResponse","catchError","throwError","TokenInterceptor","constructor","auth","toast","route","intercept","request","next","myToken","getToken","clone","setHeaders","Authorization","handle","pipe","err","status","warning","detail","summary","navigate","Error","factory"],"sourceRoot":"","sources":["/Users/melissa/Desktop/GBTFIT/GBTAngular1/src/app/components/interceptors/token.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, catchError, throwError } from 'rxjs';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { NgToastService } from 'ng-angular-popup';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n\n  constructor(private auth : AuthService,private toast:NgToastService,private route:Router) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    const myToken=this.auth.getToken();\n    if(myToken){\n      request=request.clone({\n        setHeaders:{Authorization:`Bearer ${myToken}`}\n      })\n    }\n    return next.handle(request).pipe(\n      catchError((err:any)=>{\n      if(err instanceof HttpErrorResponse){\n        if(err.status==401){\n          this.toast.warning({detail:\"Warning\",summary:\"This token is expired, Login again!\"});\n          this.route.navigate(['login']);\n        }\n      }\n      return throwError(()=>new Error(\"Some message for login error\"))\n    }));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}