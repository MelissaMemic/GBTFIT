{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { ConfirmPasswordValidator } from 'src/app/helpers/confirm-password.validator';\nimport { ResetPassword } from 'src/app/models/reset-password.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nfunction ResetComponent_small_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 16);\n    i0.ɵɵtext(1, \"*Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetComponent_small_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 16);\n    i0.ɵɵtext(1, \"*Confirm Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetComponent_small_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 16);\n    i0.ɵɵtext(1, \"*Password does not match\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class ResetComponent {\n  constructor(fb, activatedRoute) {\n    this.fb = fb;\n    this.activatedRoute = activatedRoute;\n    this.resetPasswordObj = new ResetPassword();\n  }\n  ngOnInit() {\n    this.resetPasswordForm = this.fb.group({\n      password: [null, Validators.required],\n      confirmPassword: [null, Validators.required]\n    }, {\n      validator: ConfirmPasswordValidator(\"password\", \"confirmPassword\")\n    });\n    this.activatedRoute.queryParams.subscribe(val => {\n      this.emailToReset = val['email'];\n      let uriToken = val['code'];\n      this.emailToken = uriToken.replace(/ /g, '+');\n    });\n  }\n}\nResetComponent.ɵfac = function ResetComponent_Factory(t) {\n  return new (t || ResetComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n};\nResetComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ResetComponent,\n  selectors: [[\"app-reset\"]],\n  decls: 23,\n  vars: 8,\n  consts: [[1, \"outer\"], [1, \"container\"], [1, \"row\"], [1, \"offset-md-2\", \"col-lg-5\", \"col-md-7\", \"offset-lg-4\", \"offset-md-3\"], [1, \"panel\", \"border\", \"bg-white\"], [1, \"panel-heading\"], [1, \"pt-3\", \"font-weight-bold\"], [1, \"panel-body\", \"p3\"], [3, \"formGroup\"], [1, \"form-group\", \"p-3\"], [1, \"input-field\"], [1, \"fa\", \"fa-user\", \"p-2\"], [\"formControlName\", \"password\", \"type\", \"password\", \"placeholder\", \"First Name\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"formControlName\", \"confirmPassword\", \"type\", \"password\", \"placeholder\", \"Last Name\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"btn-block\", \"mt-4\", \"w-12\", 3, \"click\"], [1, \"text-danger\"]],\n  template: function ResetComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 5)(6, \"h2\", 6);\n      i0.ɵɵtext(7, \"Reset password\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"div\", 7)(9, \"form\", 8)(10, \"div\", 9)(11, \"div\", 10);\n      i0.ɵɵelement(12, \"span\", 11)(13, \"input\", 12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(14, ResetComponent_small_14_Template, 2, 0, \"small\", 13);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\", 9)(16, \"div\", 10);\n      i0.ɵɵelement(17, \"span\", 11)(18, \"input\", 14);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(19, ResetComponent_small_19_Template, 2, 0, \"small\", 13);\n      i0.ɵɵtemplate(20, ResetComponent_small_20_Template, 2, 0, \"small\", 13);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"button\", 15);\n      i0.ɵɵlistener(\"click\", function ResetComponent_Template_button_click_21_listener() {\n        return ctx.onSignUp();\n      });\n      i0.ɵɵtext(22, \"Reset\");\n      i0.ɵɵelementEnd()()()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"formGroup\", ctx.resetPasswordForm);\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassProp(\"error\", ctx.resetPasswordForm.controls[\"password\"].dirty && ctx.resetPasswordForm.hasError(\"required\", \"password\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.resetPasswordForm.controls[\"password\"].dirty && ctx.resetPasswordForm.hasError(\"required\", \"password\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassProp(\"error\", ctx.resetPasswordForm.controls[\"confirmPassword\"].dirty && ctx.resetPasswordForm.hasError(\"required\", \"confirmPassword\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.resetPasswordForm.controls[\"confirmPassword\"].dirty && ctx.resetPasswordForm.hasError(\"required\", \"confirmPassword\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.resetPasswordForm.hasError(\"confirmPasswordValidator\", \"confirmPassword\"));\n    }\n  },\n  dependencies: [i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;AAEnE,SAASC,wBAAwB,QAAQ,4CAA4C;AACrF,SAASC,aAAa,QAAQ,qCAAqC;;;;;;;ICWnCC,iCAAqI;IAAAA,qCAAqB;IAAAA,iBAAQ;;;;;IAQlKA,iCAAmJ;IAAAA,6CAA6B;IAAAA,iBAAQ;;;;;IACxLA,iCAA4G;IAAAA,wCAAwB;IAAAA,iBAAQ;;;ADb5K,OAAM,MAAOC,cAAc;EAO3BC,YAAoBC,EAAe,EAASC,cAA6B;IAArD,OAAE,GAAFD,EAAE;IAAsB,mBAAc,GAAdC,cAAc;IAF1D,qBAAgB,GAAE,IAAIL,aAAa,EAAE;EAIrC;EAEAM,QAAQ;IACN,IAAI,CAACC,iBAAiB,GAAC,IAAI,CAACH,EAAE,CAACI,KAAK,CAAC;MACnCC,QAAQ,EAAC,CAAC,IAAI,EAACX,UAAU,CAACY,QAAQ,CAAC;MACnCC,eAAe,EAAC,CAAC,IAAI,EAACb,UAAU,CAACY,QAAQ;KAC1C,EAAC;MACAE,SAAS,EAACb,wBAAwB,CAAC,UAAU,EAAC,iBAAiB;KAChE,CAAC;IACF,IAAI,CAACM,cAAc,CAACQ,WAAW,CAACC,SAAS,CAACC,GAAG,IAAE;MAC7C,IAAI,CAACC,YAAY,GAACD,GAAG,CAAC,OAAO,CAAC;MAC9B,IAAIE,QAAQ,GAACF,GAAG,CAAC,MAAM,CAAC;MACxB,IAAI,CAACG,UAAU,GAAED,QAAQ,CAACE,OAAO,CAAC,IAAI,EAAC,GAAG,CAAC;IAE7C,CAAC,CAAC;EACJ;;AAxBajB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAkB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCX3BvB,8BAAmB;MAMwCA,8BAAc;MAAAA,iBAAK;MAE1DA,8BAA2B;MAIXA,4BAAoC;MAExCA,iBAAM;MACNA,sEAAkK;MAEtKA,iBAAM;MACNA,+BAA4B;MAEpBA,4BAAoC;MAExCA,iBAAM;MACNA,sEAAwL;MACxLA,sEAA4I;MAEhJA,iBAAM;MAENA,mCAAuF;MAA/EA;QAAA,OAASwB,cAAU;MAAA,EAAC;MAA2DxB,sBAAK;MAAAA,iBAAS;;;MAnBnGA,eAA+B;MAA/BA,iDAA+B;MAEJA,eAAiH;MAAjHA,mIAAiH;MAIlIA,eAAuG;MAAvGA,iIAAuG;MAItFA,eAA+H;MAA/HA,iJAA+H;MAIhJA,eAAqH;MAArHA,+IAAqH;MACrHA,eAA8E;MAA9EA,oGAA8E","names":["Validators","ConfirmPasswordValidator","ResetPassword","i0","ResetComponent","constructor","fb","activatedRoute","ngOnInit","resetPasswordForm","group","password","required","confirmPassword","validator","queryParams","subscribe","val","emailToReset","uriToken","emailToken","replace","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/melissa/Desktop/GBTFIT/GBTAngular1/src/app/components/reset/reset.component.ts","/Users/melissa/Desktop/GBTFIT/GBTAngular1/src/app/components/reset/reset.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { ConfirmPasswordValidator } from 'src/app/helpers/confirm-password.validator';\nimport { ResetPassword } from 'src/app/models/reset-password.model';\n\n@Component({\n  selector: 'app-reset',\n  templateUrl: './reset.component.html',\n  styleUrls: ['./reset.component.css']\n})\nexport class ResetComponent implements OnInit{\n\nresetPasswordForm!:FormGroup;\nemailToReset!:string;\nemailToken!:string;\nresetPasswordObj= new ResetPassword();\n\nconstructor(private fb: FormBuilder,private activatedRoute:ActivatedRoute){\n\n}\n\nngOnInit(): void {\n  this.resetPasswordForm=this.fb.group({\n    password:[null,Validators.required],\n    confirmPassword:[null,Validators.required]\n  },{\n    validator:ConfirmPasswordValidator(\"password\",\"confirmPassword\")\n  })\n  this.activatedRoute.queryParams.subscribe(val=>{\n    this.emailToReset=val['email'];\n    let uriToken=val['code'];\n    this.emailToken= uriToken.replace(/ /g,'+');\n\n  })\n}\n}\n","<div class=\"outer\">\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"offset-md-2 col-lg-5 col-md-7 offset-lg-4 offset-md-3\">\n                <div class=\"panel border bg-white\">\n                    <div class=\"panel-heading\">\n                         <h2 class=\"pt-3 font-weight-bold\">Reset password</h2>\n                    </div>\n                    <div class=\"panel-body p3\">\n                        <form [formGroup]=\"resetPasswordForm\" >\n                            <div class=\"form-group p-3\">\n                                <div class=\"input-field\" [class.error]=\"resetPasswordForm.controls['password'].dirty && resetPasswordForm.hasError('required','password')\">\n                                    <span class=\"fa fa-user p-2\"></span>\n                                    <input formControlName=\"password\" type=\"password\" placeholder=\"First Name\">\n                                </div>\n                                <small *ngIf=\"resetPasswordForm.controls['password'].dirty && resetPasswordForm.hasError('required','password')\" class=\"text-danger\">*Password is required</small>\n\n                            </div>\n                            <div class=\"form-group p-3\">\n                                <div class=\"input-field\" [class.error]=\"resetPasswordForm.controls['confirmPassword'].dirty && resetPasswordForm.hasError('required','confirmPassword')\">\n                                    <span class=\"fa fa-user p-2\"></span>\n                                    <input formControlName=\"confirmPassword\" type=\"password\" placeholder=\"Last Name\">\n                                </div>\n                                <small *ngIf=\"resetPasswordForm.controls['confirmPassword'].dirty && resetPasswordForm.hasError('required','confirmPassword')\" class=\"text-danger\">*Confirm Password is required</small>\n                                <small *ngIf=\"resetPasswordForm.hasError('confirmPasswordValidator','confirmPassword')\" class=\"text-danger\">*Password does not match</small>\n\n                            </div>\n                            \n                            <button (click)=\"onSignUp()\" type=\"submit\" class=\"btn btn-primary btn-block mt-4 w-12\">Reset</button>\n                         </form>\n                    </div>\n\n                </div>\n\n            </div>\n\n\n        </div>\n\n    </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}