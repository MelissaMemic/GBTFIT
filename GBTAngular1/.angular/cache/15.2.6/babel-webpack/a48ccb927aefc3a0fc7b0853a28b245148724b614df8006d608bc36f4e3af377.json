{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { ProfilVM } from '../login/user';\nimport { KartaSnimiVM } from 'src/app/models/karta_snimi_model';\nlet PaymentOptionsComponent = class PaymentOptionsComponent {\n  constructor(auth, karta, router, apiService) {\n    this.auth = auth;\n    this.karta = karta;\n    this.router = router;\n    this.apiService = apiService;\n    this.currentStep = 1;\n    this.selectedDestinations = {\n      start: \"\",\n      end: \"\"\n    };\n    this.selectedDepartureDate = '';\n    this.selectedDepartureTime = '';\n    this.selectedReturnTime = '';\n    this.selectedReturnDate = '';\n    this.isOneWay = false;\n    this.ticketOptions = {};\n    this.stanice = [];\n    this.Startstanice = [];\n    this.Endstanice = [];\n    this.selectedClass = '';\n    this.selectedSeat = '';\n    this.selectedPaymentOption = '';\n    this.selectedPaymentMethod = false;\n    this.obrok = false;\n    this.isChecked = false;\n    this.user = new ProfilVM();\n    this.IsStartDestination = false;\n    // translate.setDefaultLang('de'); \n  }\n\n  ngOnInit() {\n    this.apiService.getStanice().subscribe(stanice => {\n      this.Startstanice = stanice;\n      this.Endstanice = stanice;\n    });\n  }\n  onStartDestinationChange() {\n    const startId = parseInt(this.selectedDestinations.start, 10);\n    const isStartDestination = true;\n    if (!isNaN(startId)) {\n      this.apiService.getStaniceById(startId, isStartDestination).subscribe(endStations => {\n        this.Endstanice = endStations;\n      });\n    } else {\n      this.Endstanice = [];\n    }\n  }\n  nextStep() {\n    this.currentStep++;\n  }\n  getProgressWidth() {\n    return (this.currentStep - 1) / 4 * 100 + '%';\n  }\n  selectStartDestination(event, destination) {\n    event.preventDefault();\n    this.selectedDestinations.start = destination;\n  }\n  selectEndDestination(event, destination) {\n    event.preventDefault();\n    this.selectedDestinations.end = destination;\n  }\n  selectClass(event, destination) {\n    event.preventDefault();\n    this.selectedClass = destination;\n    console.log(this.selectedClass);\n  }\n  selectSeat(event, destination) {\n    event.preventDefault();\n    this.selectedSeat = destination;\n  }\n  areDestinationsSelected() {\n    // return this.selectedDestinations.start && this.selectedDestinations.end;\n    return true;\n  }\n  isClassAndSeatSelected() {\n    return true;\n    // return this.selectedClass && this.selectedSeat;\n  }\n\n  isPaymentOptionSelected() {\n    // return this.selectedPaymentOption !== '';\n    return true;\n  }\n  finishBooking() {\n    var karta = new KartaSnimiVM();\n    karta.korisnikId = 1;\n    karta.BrojPerona = 3;\n    karta.Cijena = 10;\n    karta.DatumVoznje = this.selectedDepartureDate == '' ? new Date('01/01/2001') : new Date(this.selectedDepartureDate);\n    karta.KlasaVoznje = this.selectedClass == '' ? '1' : this.selectedClass;\n    karta.KrajVoznje = this.selectedReturnTime == '' ? '19:00' : this.selectedReturnTime;\n    karta.Obrok = this.obrok;\n    karta.Popust = true;\n    karta.PocetakVoznje = this.selectedDepartureTime == '' ? '18:00' : this.selectedDepartureTime;\n    karta.Trajanje = '3 sata';\n    this.karta.snimi(karta);\n  }\n  searchOptions() {\n    // this.dataService.getData().subscribe((data) => {\n    //   this.data = data;\n    // });\n    // Simulating search options\n    // this.ticketOptions = [\n    //   {id:1,dateOfDeparture:'07:49', dateOfFinish:'19:00'},\n    //   {id:2,dateOfDeparture:'09:49', dateOfFinish:'19:00'},\n    //   {id:3,dateOfDeparture:'10:49', dateOfFinish:'19:00'},\n    //   {id:4,dateOfDeparture:'17:49', dateOfFinish:'19:00'}];\n    // selectedDepartureDate\n    const startDestination = parseInt(this.selectedDestinations.start, 10);\n    const endDestination = parseInt(this.selectedDestinations.end, 10);\n    this.apiService.getVoznjeInfo(this.selectedDepartureDate, startDestination, endDestination).subscribe(voznje => {\n      this.ticketOptions = voznje;\n    });\n  }\n  togglePayment(check) {\n    this.isChecked = check;\n    this.selectedPaymentOption = this.isChecked == true ? \"Kartica\" : \"Gotovina\";\n  }\n  saveSeat() {\n    console.log(this.selectSeat);\n  }\n  toggleMeal() {\n    this.obrok = !this.obrok;\n  }\n  AddDepartureTicket(id) {\n    this.selectedDepartureDate = this.selectedDepartureDate.substring(0, this.selectedDepartureDate.indexOf('T'));\n    this.selectedReturnDate = this.selectedReturnDate.substring(0, this.selectedReturnDate.indexOf('T'));\n    this.selectedDepartureTime = this.ticketOptions[id].dateOfDeparture;\n    this.selectedReturnTime = this.ticketOptions[id].dateOfFinish;\n    this.nextStep();\n  }\n};\nPaymentOptionsComponent = __decorate([Component({\n  selector: 'app-placanje',\n  templateUrl: './payment-options.component.html',\n  styleUrls: ['./payment-options.component.css']\n})], PaymentOptionsComponent);\nexport { PaymentOptionsComponent };","map":{"version":3,"mappings":"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","names":["Component","ProfilVM","KartaSnimiVM","PaymentOptionsComponent","constructor","auth","karta","router","apiService","start","end","ngOnInit","getStanice","subscribe","stanice","Startstanice","Endstanice","onStartDestinationChange","startId","parseInt","selectedDestinations","isStartDestination","isNaN","getStaniceById","endStations","nextStep","currentStep","getProgressWidth","selectStartDestination","event","destination","preventDefault","selectEndDestination","selectClass","selectedClass","console","log","selectSeat","selectedSeat","areDestinationsSelected","isClassAndSeatSelected","isPaymentOptionSelected","finishBooking","korisnikId","BrojPerona","Cijena","DatumVoznje","selectedDepartureDate","Date","KlasaVoznje","KrajVoznje","selectedReturnTime","Obrok","obrok","Popust","PocetakVoznje","selectedDepartureTime","Trajanje","snimi","searchOptions","startDestination","endDestination","getVoznjeInfo","voznje","ticketOptions","togglePayment","check","isChecked","selectedPaymentOption","saveSeat","toggleMeal","AddDepartureTicket","id","substring","indexOf","selectedReturnDate","dateOfDeparture","dateOfFinish","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/melissa/Desktop/GBTFIT/GBTAngular1/src/app/components/payment-options/payment-options.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ProfilVM } from '../login/user';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { KartaService } from 'src/app/services/karta.service';\nimport { KartaSnimiVM } from 'src/app/models/karta_snimi_model';\nimport { ApiService } from 'src/app/services/api.service';\n\n@Component({\n  selector: 'app-placanje',\n  templateUrl: './payment-options.component.html',\n  styleUrls: ['./payment-options.component.css']\n})\nexport class PaymentOptionsComponent implements OnInit {\n  currentStep = 1;\n  selectedDestinations = { start: \"\", end: \"\" };\n    selectedDepartureDate: string = '';\n  selectedDepartureTime: string = '';\n  selectedReturnTime: string = '';\n  selectedReturnDate: string = '';\n  isOneWay: boolean = false;\n  ticketOptions: any = {};\n  stanice: any[] = [];\n  Startstanice: any[] = [];\n  Endstanice: any[] = [];\n  selectedClass: string = '';\n  selectedSeat: string = '';\n  selectedPaymentOption: string = '';\n  selectedPaymentMethod: boolean=false;\n  obrok: Boolean = false;\n  isChecked: Boolean = false;\n  user: ProfilVM = new ProfilVM;\n  IsStartDestination:Boolean=false;\n  selectedStanica: any;\n\n  constructor(\n    private auth: AuthService,\n    private karta: KartaService,\n    private router:Router,\n    private apiService: ApiService)\n    {  \n        // translate.setDefaultLang('de'); \n  }\n  ngOnInit(): void {\n    this.apiService.getStanice().subscribe((stanice) => {\n      this.Startstanice = stanice;\n      this.Endstanice = stanice;\n    });\n\n  }\n\n  onStartDestinationChange() {\n    const startId = parseInt(this.selectedDestinations.start, 10); \n    const isStartDestination = true; \n  \n    if (!isNaN(startId)) {\n      this.apiService.getStaniceById(startId, isStartDestination).subscribe((endStations) => {\n        this.Endstanice = endStations;\n      });\n    } else {\n      this.Endstanice = []; \n    }\n  \n\n  }\n\n  nextStep() {\n    this.currentStep++;\n  }\n  getProgressWidth() {\n    return ((this.currentStep - 1) / 4) * 100 + '%';\n  }\n  selectStartDestination(event: Event, destination: string) {\n    event.preventDefault();\n\n    this.selectedDestinations.start = destination;\n  }\n  selectEndDestination(event: Event, destination: string) {\n    event.preventDefault();\n    this.selectedDestinations.end = destination;\n  }\n  selectClass(event: Event, destination: string) {\n    event.preventDefault();\n\n    this.selectedClass = destination;\n    console.log(this.selectedClass);\n  }\n  selectSeat(event: Event, destination: string) {\n    event.preventDefault();\n\n    this.selectedSeat = destination;\n  }\n  areDestinationsSelected() {\n    // return this.selectedDestinations.start && this.selectedDestinations.end;\n    return true\n\n  }\n  isClassAndSeatSelected() {\n    return true\n\n    // return this.selectedClass && this.selectedSeat;\n  }\n  isPaymentOptionSelected() {\n    // return this.selectedPaymentOption !== '';\n    return true\n  }\n  finishBooking() {\n    var karta = new KartaSnimiVM();\n    karta.korisnikId = 1;\n    karta.BrojPerona = 3;\n    karta.Cijena = 10;\n    karta.DatumVoznje = this.selectedDepartureDate == '' ? new Date('01/01/2001') : new Date(this.selectedDepartureDate);\n    karta.KlasaVoznje = this.selectedClass == '' ? '1' : this.selectedClass;\n    karta.KrajVoznje = this.selectedReturnTime == '' ? '19:00' : this.selectedReturnTime;\n    karta.Obrok = this.obrok;\n    karta.Popust = true;\n    karta.PocetakVoznje = this.selectedDepartureTime == '' ? '18:00' : this.selectedDepartureTime;\n    karta.Trajanje = '3 sata';\n    this.karta.snimi(karta);\n  }\n  searchOptions() {\n\n    // this.dataService.getData().subscribe((data) => {\n    //   this.data = data;\n    // });\n    // Simulating search options\n    // this.ticketOptions = [\n    //   {id:1,dateOfDeparture:'07:49', dateOfFinish:'19:00'},\n    //   {id:2,dateOfDeparture:'09:49', dateOfFinish:'19:00'},\n    //   {id:3,dateOfDeparture:'10:49', dateOfFinish:'19:00'},\n    //   {id:4,dateOfDeparture:'17:49', dateOfFinish:'19:00'}];\n\n    // selectedDepartureDate\n    const startDestination = parseInt(this.selectedDestinations.start, 10); \n    const endDestination = parseInt(this.selectedDestinations.end, 10); \n        this.apiService.getVoznjeInfo(this.selectedDepartureDate, startDestination,endDestination).subscribe((voznje) => {\n          this.ticketOptions = voznje;\n      });\n\n  }\n  togglePayment(check: Boolean) {\n    this.isChecked = check;\n    this.selectedPaymentOption = this.isChecked == true ? \"Kartica\" : \"Gotovina\";\n  }\n  saveSeat() {\n    console.log(this.selectSeat);\n  }\n  toggleMeal() {\n    this.obrok = !this.obrok;\n  }\n  AddDepartureTicket(id : number) {\n    this.selectedDepartureDate = this.selectedDepartureDate.substring(0, this.selectedDepartureDate.indexOf('T'));\n    this.selectedReturnDate = this.selectedReturnDate.substring(0, this.selectedReturnDate.indexOf('T'));\n    this.selectedDepartureTime = this.ticketOptions[id].dateOfDeparture;\n    this.selectedReturnTime = this.ticketOptions[id].dateOfFinish;\n    this.nextStep();\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}