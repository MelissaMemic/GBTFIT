{"ast":null,"code":"export function ConfirmPasswordValidator(controlName, matchControlName) {\n  return formGroup => {\n    const passwordControl = formGroup.controls[controlName];\n    const confirmpasswordControl = formGroup.controls[matchControlName];\n    if (confirmpasswordControl.errors && confirmpasswordControl.errors['confirmPasswordValidator']) {\n      return;\n    }\n    if (passwordControl.value !== confirmpasswordControl.value) {\n      confirmpasswordControl.setErrors({\n        confirmPasswordValidator: true\n      });\n    } else {\n      confirmpasswordControl.setErrors(null);\n    }\n  };\n}","map":{"version":3,"names":["ConfirmPasswordValidator","controlName","matchControlName","formGroup","passwordControl","controls","confirmpasswordControl","errors","value","setErrors","confirmPasswordValidator"],"sources":["/Users/melissa/Desktop/GBTfinalni/GBTFIT/GBTAngular1/src/app/helpers/confirm-password.validator.ts"],"sourcesContent":["import { FormGroup } from \"@angular/forms\";\n\nexport function ConfirmPasswordValidator(controlName:string,matchControlName:string){\nreturn (formGroup:FormGroup)=>{\n    const passwordControl=formGroup.controls[controlName];\n    const confirmpasswordControl=formGroup.controls[matchControlName];\n\n    if(confirmpasswordControl.errors&& confirmpasswordControl.errors['confirmPasswordValidator']){\n        return;\n    }\n    if(passwordControl.value!==confirmpasswordControl.value){\n        confirmpasswordControl.setErrors({confirmPasswordValidator:true})\n    }\n    else{\n        confirmpasswordControl.setErrors(null);\n    }\n}\n}"],"mappings":"AAEA,OAAM,SAAUA,wBAAwBA,CAACC,WAAkB,EAACC,gBAAuB;EACnF,OAAQC,SAAmB,IAAG;IAC1B,MAAMC,eAAe,GAACD,SAAS,CAACE,QAAQ,CAACJ,WAAW,CAAC;IACrD,MAAMK,sBAAsB,GAACH,SAAS,CAACE,QAAQ,CAACH,gBAAgB,CAAC;IAEjE,IAAGI,sBAAsB,CAACC,MAAM,IAAGD,sBAAsB,CAACC,MAAM,CAAC,0BAA0B,CAAC,EAAC;MACzF;;IAEJ,IAAGH,eAAe,CAACI,KAAK,KAAGF,sBAAsB,CAACE,KAAK,EAAC;MACpDF,sBAAsB,CAACG,SAAS,CAAC;QAACC,wBAAwB,EAAC;MAAI,CAAC,CAAC;KACpE,MACG;MACAJ,sBAAsB,CAACG,SAAS,CAAC,IAAI,CAAC;;EAE9C,CAAC;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}