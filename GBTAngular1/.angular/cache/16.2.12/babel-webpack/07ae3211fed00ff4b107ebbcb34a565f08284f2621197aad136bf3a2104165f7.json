{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { ProfilVM } from '../login/user';\nlet PaymentOptionsComponent = class PaymentOptionsComponent {\n  constructor(auth, karta, router, apiService, http) {\n    this.auth = auth;\n    this.karta = karta;\n    this.router = router;\n    this.apiService = apiService;\n    this.http = http;\n    this.currentStep = 1;\n    this.selectedDestinations = {\n      start: \"\",\n      end: \"\"\n    };\n    this.selectedDepartureDate = '';\n    this.selectedDepartureTime = '';\n    this.selectedReturnTime = '';\n    this.selectedReturnDate = '';\n    this.isOneWay = false;\n    this.ticketOptions = {};\n    this.stanice = [];\n    this.Startstanice = [];\n    this.Endstanice = [];\n    this.selectedClass = '';\n    this.selectedSeat = '';\n    this.selectedPaymentOption = '';\n    this.selectedPaymentMethod = false;\n    this.obrok = false;\n    this.isChecked = false;\n    this.user = new ProfilVM();\n    this.IsStartDestination = false;\n    // translate.setDefaultLang('de'); \n  }\n\n  ngOnInit() {\n    this.apiService.getStanice().subscribe(stanice => {\n      this.Startstanice = stanice;\n      this.Endstanice = stanice;\n    });\n  }\n  onStartDestinationChange() {\n    const startId = parseInt(this.selectedDestinations.start, 10);\n    const isStartDestination = true;\n    if (!isNaN(startId)) {\n      this.apiService.getStaniceById(startId, isStartDestination).subscribe(endStations => {\n        this.Endstanice = endStations;\n      });\n    } else {\n      this.Endstanice = [];\n    }\n  }\n  nextStep() {\n    this.currentStep++;\n  }\n  getProgressWidth() {\n    return (this.currentStep - 1) / 4 * 100 + '%';\n  }\n  selectStartDestination(event, destination) {\n    event.preventDefault();\n    this.selectedDestinations.start = destination;\n  }\n  selectEndDestination(event, destination) {\n    event.preventDefault();\n    this.selectedDestinations.end = destination;\n  }\n  selectClass(event, destination) {\n    event.preventDefault();\n    this.selectedClass = destination;\n    console.log(this.selectedClass);\n  }\n  selectSeat(event, destination) {\n    event.preventDefault();\n    this.selectedSeat = destination;\n  }\n  areDestinationsSelected() {\n    // return this.selectedDestinations.start && this.selectedDestinations.end;\n    return true;\n  }\n  isClassAndSeatSelected() {\n    return true;\n  }\n  isPaymentOptionSelected() {\n    return true;\n  }\n  // finishBooking() {\n  //   const karta = new KartaSnimiVM();\n  //   karta.korisnikId = 1;  \n  //   karta.Cijena = 123; \n  //   karta.DatumVoznje = this.selectedDepartureDate ? new Date(this.selectedDepartureDate) : new Date('2001-01-01');  \n  //   karta.KlasaVoznje = this.selectedClass ? this.selectedClass : 'Druga'; \n  //   karta.KrajVoznje = this.selectedReturnTime || '19:00';  \n  //   karta.Obrok = this.obrok;  \n  //   karta.Popust = true;  \n  //   karta.PocetakVoznje = this.selectedDepartureTime || '18:00'; \n  //   karta.Trajanje = '3 sata';  \n  //   this.karta.snimi(karta);\n  // }\n  finishBooking() {\n    const reservationData = {\n      korisnikID: 1,\n      krajnjaDestinacijaID: this.selectedDestinations.end,\n      pocetnaDestinacijaID: this.selectedDestinations.start,\n      datumVoznje: new Date().toISOString(),\n      pocetakVoznje: this.selectedReturnTime,\n      krajVoznje: this.selectedReturnTime,\n      trajanje: '3h',\n      klasaVoznje: 1,\n      obrok: this.obrok !== null,\n      popust: true,\n      brojPerona: 2,\n      cijena: 123\n    };\n    this.http.post('https://localhost:7219/Karta/Snimi', reservationData).subscribe(response => {\n      console.log('Reservation completed successfully:', response);\n      this.router.navigate(['/confirmation']);\n    }, error => {\n      console.error('Error completing reservation:', error);\n      // Handle error\n    });\n\n    searchOptions();\n    {\n      const startDestination = parseInt(this.selectedDestinations.start, 10);\n      const endDestination = parseInt(this.selectedDestinations.end, 10);\n      this.apiService.getVoznjeInfo(this.selectedDepartureDate, startDestination, endDestination).subscribe(voznje => {\n        this.ticketOptions = voznje;\n      });\n    }\n    togglePayment(check, Boolean);\n    {\n      this.isChecked = check;\n      this.selectedPaymentOption = this.isChecked == true ? \"Kartica\" : \"Gotovina\";\n    }\n    saveSeat();\n    {\n      console.log(this.selectSeat);\n    }\n    toggleMeal();\n    {\n      this.obrok = !this.obrok;\n    }\n    AddDepartureTicket(id, number);\n    {\n      this.selectedDepartureDate = this.selectedDepartureDate.substring(0, this.selectedDepartureDate.indexOf('T'));\n      this.selectedReturnDate = this.selectedReturnDate.substring(0, this.selectedReturnDate.indexOf('T'));\n      this.selectedDepartureTime = this.ticketOptions[id].dateOfDeparture;\n      this.selectedReturnTime = this.ticketOptions[id].dateOfFinish;\n      this.nextStep();\n    }\n  }\n};\nPaymentOptionsComponent = __decorate([Component({\n  selector: 'app-placanje',\n  templateUrl: './payment-options.component.html',\n  styleUrls: ['./payment-options.component.css']\n})], PaymentOptionsComponent);\nexport { PaymentOptionsComponent };","map":{"version":3,"names":["Component","ProfilVM","PaymentOptionsComponent","constructor","auth","karta","router","apiService","http","currentStep","selectedDestinations","start","end","selectedDepartureDate","selectedDepartureTime","selectedReturnTime","selectedReturnDate","isOneWay","ticketOptions","stanice","Startstanice","Endstanice","selectedClass","selectedSeat","selectedPaymentOption","selectedPaymentMethod","obrok","isChecked","user","IsStartDestination","ngOnInit","getStanice","subscribe","onStartDestinationChange","startId","parseInt","isStartDestination","isNaN","getStaniceById","endStations","nextStep","getProgressWidth","selectStartDestination","event","destination","preventDefault","selectEndDestination","selectClass","console","log","selectSeat","areDestinationsSelected","isClassAndSeatSelected","isPaymentOptionSelected","finishBooking","reservationData","korisnikID","krajnjaDestinacijaID","pocetnaDestinacijaID","datumVoznje","Date","toISOString","pocetakVoznje","krajVoznje","trajanje","klasaVoznje","popust","brojPerona","cijena","post","response","navigate","error","searchOptions","startDestination","endDestination","getVoznjeInfo","voznje","togglePayment","check","Boolean","saveSeat","toggleMeal","AddDepartureTicket","id","number","substring","indexOf","dateOfDeparture","dateOfFinish","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/melissa/Desktop/GBTfinalni/GBTFIT/GBTAngular1/src/app/components/payment-options/payment-options.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ProfilVM } from '../login/user';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { KartaService } from 'src/app/services/karta.service';\nimport { KartaSnimiVM } from 'src/app/models/karta_snimi_model';\nimport { ApiService } from 'src/app/services/api.service';\n\n@Component({\n  selector: 'app-placanje',\n  templateUrl: './payment-options.component.html',\n  styleUrls: ['./payment-options.component.css']\n})\nexport class PaymentOptionsComponent implements OnInit {\n  currentStep = 1;\n  selectedDestinations = { start: \"\", end: \"\" };\n    selectedDepartureDate: string = '';\n  selectedDepartureTime: string = '';\n  selectedReturnTime: string = '';\n  selectedReturnDate: string = '';\n  isOneWay: boolean = false;\n  ticketOptions: any = {};\n  stanice: any[] = [];\n  Startstanice: any[] = [];\n  Endstanice: any[] = [];\n  selectedClass: string = '';\n  selectedSeat: string = '';\n  selectedPaymentOption: string = '';\n  selectedPaymentMethod: boolean=false;\n  obrok: Boolean = false;\n  isChecked: Boolean = false;\n  user: ProfilVM = new ProfilVM;\n  IsStartDestination:Boolean=false;\n  selectedStanica: any;\n\n  constructor(\n    private auth: AuthService,\n    private karta: KartaService,\n    private router:Router,\n    private apiService: ApiService,private http: HttpClient)\n    {  \n        // translate.setDefaultLang('de'); \n  }\n  ngOnInit(): void {\n    this.apiService.getStanice().subscribe((stanice) => {\n      this.Startstanice = stanice;\n      this.Endstanice = stanice;\n    });\n\n  }\n\n  onStartDestinationChange() {\n    const startId = parseInt(this.selectedDestinations.start, 10); \n    const isStartDestination = true; \n  \n    if (!isNaN(startId)) {\n      this.apiService.getStaniceById(startId, isStartDestination).subscribe((endStations) => {\n        this.Endstanice = endStations;\n      });\n    } else {\n      this.Endstanice = []; \n    }\n  }\n\n  nextStep() {\n    this.currentStep++;\n  }\n  getProgressWidth() {\n    return ((this.currentStep - 1) / 4) * 100 + '%';\n  }\n  selectStartDestination(event: Event, destination: string) {\n    event.preventDefault();\n\n    this.selectedDestinations.start = destination;\n  }\n  selectEndDestination(event: Event, destination: string) {\n    event.preventDefault();\n    this.selectedDestinations.end = destination;\n  }\n  selectClass(event: Event, destination: string) {\n    event.preventDefault();\n\n    this.selectedClass = destination;\n    console.log(this.selectedClass);\n  }\n  selectSeat(event: Event, destination: string) {\n    event.preventDefault();\n\n    this.selectedSeat = destination;\n  }\n  areDestinationsSelected() {\n    // return this.selectedDestinations.start && this.selectedDestinations.end;\n    return true\n\n  }\n  isClassAndSeatSelected() {\n    return true\n\n  }\n  isPaymentOptionSelected() {\n    return true\n  }\n  // finishBooking() {\n  //   const karta = new KartaSnimiVM();\n    \n  //   karta.korisnikId = 1;  \n  //   karta.Cijena = 123; \n  //   karta.DatumVoznje = this.selectedDepartureDate ? new Date(this.selectedDepartureDate) : new Date('2001-01-01');  \n  //   karta.KlasaVoznje = this.selectedClass ? this.selectedClass : 'Druga'; \n  //   karta.KrajVoznje = this.selectedReturnTime || '19:00';  \n  //   karta.Obrok = this.obrok;  \n  //   karta.Popust = true;  \n  //   karta.PocetakVoznje = this.selectedDepartureTime || '18:00'; \n  //   karta.Trajanje = '3 sata';  \n    \n  //   this.karta.snimi(karta);\n  // }\n  finishBooking() {\n    const reservationData = {\n        korisnikID: 1,  \n        krajnjaDestinacijaID: this.selectedDestinations.end,\n        pocetnaDestinacijaID: this.selectedDestinations.start,\n        datumVoznje: new Date().toISOString(), \n        pocetakVoznje: this.selectedReturnTime,\n        krajVoznje: this.selectedReturnTime,\n        trajanje: '3h',\n        klasaVoznje: 1,\n        obrok: this.obrok !== null, \n        popust: true,  \n        brojPerona: 2,\n        cijena: 123, \n    };\n\n    this.http.post('https://localhost:7219/Karta/Snimi', reservationData)\n    .subscribe(\n      response => {\n        console.log('Reservation completed successfully:', response);\n        this.router.navigate(['/confirmation']);\n      },\n      error => {\n        console.error('Error completing reservation:', error);\n        // Handle error\n      }\n    );\n  searchOptions() {\n    const startDestination = parseInt(this.selectedDestinations.start, 10); \n    const endDestination = parseInt(this.selectedDestinations.end, 10); \n\n    this.apiService.getVoznjeInfo(this.selectedDepartureDate, startDestination,endDestination).subscribe((voznje) => {\n          this.ticketOptions = voznje;\n    });\n\n  }\n  togglePayment(check: Boolean) {\n    this.isChecked = check;\n    this.selectedPaymentOption = this.isChecked == true ? \"Kartica\" : \"Gotovina\";\n  }\n  saveSeat() {\n    console.log(this.selectSeat);\n  }\n  toggleMeal() {\n    this.obrok = !this.obrok;\n  }\n  AddDepartureTicket(id : number) {\n    this.selectedDepartureDate = this.selectedDepartureDate.substring(0, this.selectedDepartureDate.indexOf('T'));\n    this.selectedReturnDate = this.selectedReturnDate.substring(0, this.selectedReturnDate.indexOf('T'));\n    this.selectedDepartureTime = this.ticketOptions[id].dateOfDeparture;\n    this.selectedReturnTime = this.ticketOptions[id].dateOfFinish;\n    this.nextStep();\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}