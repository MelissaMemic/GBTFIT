{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nconst LOCALIZATION_LOCAL_STORAGE_KEY = 'language';\nexport class TranslationService {\n  constructor(translate) {\n    this.translate = translate;\n    // Private properties\n    this.langIds = [];\n    // add new langIds to the list\n    this.translate.addLangs(['bs']);\n    // this language will be used as a fallback when a translation isn't found in the current language\n    this.translate.setDefaultLang('bs');\n  }\n  loadTranslations(...args) {\n    const locales = [...args];\n    locales.forEach(locale => {\n      // use setTranslation() with the third argument set to true\n      // to append translations instead of replacing them\n      this.translate.setTranslation(locale.lang, locale.data, true);\n      this.langIds.push(locale.lang);\n    });\n    // add new languages to the list\n    this.translate.addLangs(this.langIds);\n    this.translate.use(this.getSelectedLanguage());\n  }\n  setLanguage(lang) {\n    if (lang) {\n      this.translate.use(this.translate.getDefaultLang());\n      this.translate.use(lang);\n      localStorage.setItem(LOCALIZATION_LOCAL_STORAGE_KEY, lang);\n    }\n  }\n  /**\n   * Returns selected language\n   */\n  getSelectedLanguage() {\n    return localStorage.getItem(LOCALIZATION_LOCAL_STORAGE_KEY) || this.translate.getDefaultLang();\n  }\n  get(key) {\n    var value = '';\n    this.translate.get(key).subscribe(data => {\n      value = data;\n    });\n    return value;\n  }\n  static #_ = this.ɵfac = function TranslationService_Factory(t) {\n    return new (t || TranslationService)(i0.ɵɵinject(i1.TranslateService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TranslationService,\n    factory: TranslationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["LOCALIZATION_LOCAL_STORAGE_KEY","TranslationService","constructor","translate","langIds","addLangs","setDefaultLang","loadTranslations","args","locales","forEach","locale","setTranslation","lang","data","push","use","getSelectedLanguage","setLanguage","getDefaultLang","localStorage","setItem","getItem","get","key","value","subscribe","_","i0","ɵɵinject","i1","TranslateService","_2","factory","ɵfac","providedIn"],"sources":["/Users/melissa/Desktop/SanelGBT/GBTFIT/GBTAngular1/src/app/shared/i18n/translation.service.ts"],"sourcesContent":["// Localization is based on '@ngx-translate/core';\r\n// Please be familiar with official documentations first => https://github.com/ngx-translate/core\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\nexport interface Locale {\r\n  lang: string;\r\n  data: any;\r\n}\r\n\r\nconst LOCALIZATION_LOCAL_STORAGE_KEY = 'language';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TranslationService {\r\n  // Private properties\r\n  private langIds: any = [];\r\n\r\n  constructor(private translate: TranslateService) {\r\n    // add new langIds to the list\r\n    this.translate.addLangs(['bs']);\r\n\r\n    // this language will be used as a fallback when a translation isn't found in the current language\r\n    this.translate.setDefaultLang('bs');\r\n  }\r\n\r\n  loadTranslations(...args: Locale[]): void {\r\n    const locales = [...args];\r\n\r\n    locales.forEach((locale) => {\r\n      // use setTranslation() with the third argument set to true\r\n      // to append translations instead of replacing them\r\n      this.translate.setTranslation(locale.lang, locale.data, true);\r\n      this.langIds.push(locale.lang);\r\n    });\r\n\r\n    // add new languages to the list\r\n    this.translate.addLangs(this.langIds);\r\n    this.translate.use(this.getSelectedLanguage());\r\n  }\r\n\r\n  setLanguage(lang: string) {\r\n    if (lang) {\r\n      this.translate.use(this.translate.getDefaultLang());\r\n      this.translate.use(lang);\r\n      localStorage.setItem(LOCALIZATION_LOCAL_STORAGE_KEY, lang);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns selected language\r\n   */\r\n  getSelectedLanguage(): any {\r\n    return (\r\n      localStorage.getItem(LOCALIZATION_LOCAL_STORAGE_KEY) ||\r\n      this.translate.getDefaultLang()\r\n    );\r\n  }\r\n\r\n  get(key: string) {\r\n    var value = '';\r\n    this.translate.get(key).subscribe((data: any) => {\r\n      value = data;\r\n    });\r\n    return value;\r\n  }\r\n}\r\n"],"mappings":";;AAWA,MAAMA,8BAA8B,GAAG,UAAU;AAKjD,OAAM,MAAOC,kBAAkB;EAI7BC,YAAoBC,SAA2B;IAA3B,KAAAA,SAAS,GAATA,SAAS;IAH7B;IACQ,KAAAC,OAAO,GAAQ,EAAE;IAGvB;IACA,IAAI,CAACD,SAAS,CAACE,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC;IAE/B;IACA,IAAI,CAACF,SAAS,CAACG,cAAc,CAAC,IAAI,CAAC;EACrC;EAEAC,gBAAgBA,CAAC,GAAGC,IAAc;IAChC,MAAMC,OAAO,GAAG,CAAC,GAAGD,IAAI,CAAC;IAEzBC,OAAO,CAACC,OAAO,CAAEC,MAAM,IAAI;MACzB;MACA;MACA,IAAI,CAACR,SAAS,CAACS,cAAc,CAACD,MAAM,CAACE,IAAI,EAAEF,MAAM,CAACG,IAAI,EAAE,IAAI,CAAC;MAC7D,IAAI,CAACV,OAAO,CAACW,IAAI,CAACJ,MAAM,CAACE,IAAI,CAAC;IAChC,CAAC,CAAC;IAEF;IACA,IAAI,CAACV,SAAS,CAACE,QAAQ,CAAC,IAAI,CAACD,OAAO,CAAC;IACrC,IAAI,CAACD,SAAS,CAACa,GAAG,CAAC,IAAI,CAACC,mBAAmB,EAAE,CAAC;EAChD;EAEAC,WAAWA,CAACL,IAAY;IACtB,IAAIA,IAAI,EAAE;MACR,IAAI,CAACV,SAAS,CAACa,GAAG,CAAC,IAAI,CAACb,SAAS,CAACgB,cAAc,EAAE,CAAC;MACnD,IAAI,CAAChB,SAAS,CAACa,GAAG,CAACH,IAAI,CAAC;MACxBO,YAAY,CAACC,OAAO,CAACrB,8BAA8B,EAAEa,IAAI,CAAC;;EAE9D;EAEA;;;EAGAI,mBAAmBA,CAAA;IACjB,OACEG,YAAY,CAACE,OAAO,CAACtB,8BAA8B,CAAC,IACpD,IAAI,CAACG,SAAS,CAACgB,cAAc,EAAE;EAEnC;EAEAI,GAAGA,CAACC,GAAW;IACb,IAAIC,KAAK,GAAG,EAAE;IACd,IAAI,CAACtB,SAAS,CAACoB,GAAG,CAACC,GAAG,CAAC,CAACE,SAAS,CAAEZ,IAAS,IAAI;MAC9CW,KAAK,GAAGX,IAAI;IACd,CAAC,CAAC;IACF,OAAOW,KAAK;EACd;EAAC,QAAAE,CAAA,G;qBAnDU1B,kBAAkB,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,gBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAlB/B,kBAAkB;IAAAgC,OAAA,EAAlBhC,kBAAkB,CAAAiC,IAAA;IAAAC,UAAA,EAFjB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}