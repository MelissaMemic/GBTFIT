{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { ConfirmPasswordValidator } from 'src/app/helpers/confirm-password.validator';\nimport { validateAllFormFields } from 'src/app/helpers/validateForm';\nimport { ResetPassword } from 'src/app/models/reset-password.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ng-angular-popup\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"src/app/services/reset-password.service\";\nfunction ResetComponent_small_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 16);\n    i0.ɵɵtext(1, \"*Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetComponent_small_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 16);\n    i0.ɵɵtext(1, \"*Confirm Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetComponent_small_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 16);\n    i0.ɵɵtext(1, \"*Password does not match\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class ResetComponent {\n  constructor(toast, router, fb, activatedRoute, resetService) {\n    this.toast = toast;\n    this.router = router;\n    this.fb = fb;\n    this.activatedRoute = activatedRoute;\n    this.resetService = resetService;\n    this.resetPasswordObj = new ResetPassword();\n  }\n  ngOnInit() {\n    this.resetPasswordForm = this.fb.group({\n      password: [null, Validators.required],\n      confirmPassword: [null, Validators.required]\n    }, {\n      validator: ConfirmPasswordValidator(\"password\", \"confirmPassword\")\n    });\n    this.activatedRoute.queryParams.subscribe(val => {\n      this.emailToReset = val['email'];\n      let uriToken = val['code'];\n      this.emailToken = uriToken.replace(/ /g, '+');\n    });\n  }\n  reset() {\n    if (this.resetPasswordForm.valid) {\n      this.resetPasswordObj.email = this.emailToReset;\n      this.resetPasswordObj.newPassword = this.resetPasswordForm.value.password;\n      this.resetPasswordObj.confirmPassword = this.resetPasswordForm.value.confirmPassword;\n      this.resetPasswordObj.emailToken = this.emailToken;\n      this.resetService.resetPassword(this.resetPasswordObj).subscribe({\n        next: res => {\n          this.toast.success({\n            detail: 'SUCCESS',\n            summary: \"Password is set new!\",\n            duration: 5000\n          });\n          this.router.navigate(['/']);\n        },\n        error: err => {\n          this.toast.error({\n            detail: 'ERROR',\n            summary: \"Password is NOT set new!\",\n            duration: 5000\n          });\n        }\n      });\n    } else {\n      validateAllFormFields(this.resetPasswordForm);\n    }\n  }\n  static #_ = this.ɵfac = function ResetComponent_Factory(t) {\n    return new (t || ResetComponent)(i0.ɵɵdirectiveInject(i1.NgToastService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i4.ResetPasswordService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ResetComponent,\n    selectors: [[\"app-reset\"]],\n    decls: 23,\n    vars: 8,\n    consts: [[1, \"outer\"], [1, \"container\"], [1, \"row\"], [1, \"offset-md-2\", \"col-lg-5\", \"col-md-7\", \"offset-lg-4\", \"offset-md-3\"], [1, \"panel\", \"border\", \"bg-white\"], [1, \"panel-heading\"], [1, \"pt-3\", \"font-weight-bold\"], [1, \"panel-body\", \"p3\"], [3, \"formGroup\"], [1, \"form-group\", \"p-3\"], [1, \"input-field\"], [1, \"fa\", \"fa-user\", \"p-2\"], [\"formControlName\", \"password\", \"type\", \"password\", \"placeholder\", \"New Password\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"formControlName\", \"confirmPassword\", \"type\", \"password\", \"placeholder\", \"Confirm Password\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"btn-block\", \"mt-4\", \"w-12\", 3, \"click\"], [1, \"text-danger\"]],\n    template: function ResetComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 5)(6, \"h2\", 6);\n        i0.ɵɵtext(7, \"Reset password\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(8, \"div\", 7)(9, \"form\", 8)(10, \"div\", 9)(11, \"div\", 10);\n        i0.ɵɵelement(12, \"span\", 11)(13, \"input\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(14, ResetComponent_small_14_Template, 2, 0, \"small\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 9)(16, \"div\", 10);\n        i0.ɵɵelement(17, \"span\", 11)(18, \"input\", 14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(19, ResetComponent_small_19_Template, 2, 0, \"small\", 13);\n        i0.ɵɵtemplate(20, ResetComponent_small_20_Template, 2, 0, \"small\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"button\", 15);\n        i0.ɵɵlistener(\"click\", function ResetComponent_Template_button_click_21_listener() {\n          return ctx.reset();\n        });\n        i0.ɵɵtext(22, \"Reset\");\n        i0.ɵɵelementEnd()()()()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"formGroup\", ctx.resetPasswordForm);\n        i0.ɵɵadvance(2);\n        i0.ɵɵclassProp(\"error\", ctx.resetPasswordForm.controls[\"password\"].dirty && ctx.resetPasswordForm.hasError(\"required\", \"password\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.resetPasswordForm.controls[\"password\"].dirty && ctx.resetPasswordForm.hasError(\"required\", \"password\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵclassProp(\"error\", ctx.resetPasswordForm.controls[\"confirmPassword\"].dirty && ctx.resetPasswordForm.hasError(\"required\", \"confirmPassword\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.resetPasswordForm.controls[\"confirmPassword\"].dirty && ctx.resetPasswordForm.hasError(\"required\", \"confirmPassword\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.resetPasswordForm.hasError(\"confirmPasswordValidator\", \"confirmPassword\"));\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","ConfirmPasswordValidator","validateAllFormFields","ResetPassword","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ResetComponent","constructor","toast","router","fb","activatedRoute","resetService","resetPasswordObj","ngOnInit","resetPasswordForm","group","password","required","confirmPassword","validator","queryParams","subscribe","val","emailToReset","uriToken","emailToken","replace","reset","valid","email","newPassword","value","resetPassword","next","res","success","detail","summary","duration","navigate","error","err","_","ɵɵdirectiveInject","i1","NgToastService","i2","Router","i3","FormBuilder","ActivatedRoute","i4","ResetPasswordService","_2","selectors","decls","vars","consts","template","ResetComponent_Template","rf","ctx","ɵɵelement","ɵɵtemplate","ResetComponent_small_14_Template","ResetComponent_small_19_Template","ResetComponent_small_20_Template","ɵɵlistener","ResetComponent_Template_button_click_21_listener","ɵɵadvance","ɵɵproperty","ɵɵclassProp","controls","dirty","hasError"],"sources":["/Users/melissa/Desktop/SanelGBT/GBTFIT/GBTAngular1/src/app/components/reset/reset.component.ts","/Users/melissa/Desktop/SanelGBT/GBTFIT/GBTAngular1/src/app/components/reset/reset.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NgToastComponent, NgToastService } from 'ng-angular-popup';\nimport { ConfirmPasswordValidator } from 'src/app/helpers/confirm-password.validator';\nimport { validateAllFormFields } from 'src/app/helpers/validateForm';\nimport { ResetPassword } from 'src/app/models/reset-password.model';\nimport { ResetPasswordService } from 'src/app/services/reset-password.service';\n\n@Component({\n  selector: 'app-reset',\n  templateUrl: './reset.component.html',\n  styleUrls: ['./reset.component.css']\n})\nexport class ResetComponent implements OnInit{\n\nresetPasswordForm!:FormGroup;\nemailToReset!:string;\nemailToken!:string;\nresetPasswordObj= new ResetPassword();\n\nconstructor(private toast:NgToastService,\n  private router:Router,\n   private fb: FormBuilder,\n   private activatedRoute:ActivatedRoute,\n   private resetService:ResetPasswordService){\n\n}\n\nngOnInit(): void {\n  this.resetPasswordForm=this.fb.group({\n    password:[null,Validators.required],\n    confirmPassword:[null,Validators.required]\n  },{\n    validator:ConfirmPasswordValidator(\"password\",\"confirmPassword\")\n  })\n  this.activatedRoute.queryParams.subscribe(val=>{\n    this.emailToReset=val['email'];\n    let uriToken=val['code'];\n    this.emailToken= uriToken.replace(/ /g,'+');\n\n  })\n}\nreset(){\n  if(this.resetPasswordForm.valid){\nthis.resetPasswordObj.email=this.emailToReset;\nthis.resetPasswordObj.newPassword=this.resetPasswordForm.value.password;\nthis.resetPasswordObj.confirmPassword=this.resetPasswordForm.value.confirmPassword;\nthis.resetPasswordObj.emailToken=this.emailToken;\n\nthis.resetService.resetPassword(this.resetPasswordObj).subscribe({\n  next:(res)=>\n  {\nthis.toast.success({\n  detail:'SUCCESS',\n  summary:\"Password is set new!\",\n  duration:5000,\n});\n    this.router.navigate(['/'])\n  },\n  error:(err)=>{\n    this.toast.error({\n      detail:'ERROR',\n      summary:\"Password is NOT set new!\",\n      duration:5000,\n    });\n  }\n})\n  }else{\n    validateAllFormFields(this.resetPasswordForm);\n  }\n}\n}\n","<div class=\"outer\">\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"offset-md-2 col-lg-5 col-md-7 offset-lg-4 offset-md-3\">\n                <div class=\"panel border bg-white\">\n                    <div class=\"panel-heading\">\n                         <h2 class=\"pt-3 font-weight-bold\">Reset password</h2>\n                    </div>\n                    <div class=\"panel-body p3\">\n                        <form [formGroup]=\"resetPasswordForm\" >\n                            <div class=\"form-group p-3\">\n                                <div class=\"input-field\" [class.error]=\"resetPasswordForm.controls['password'].dirty && resetPasswordForm.hasError('required','password')\">\n                                    <span class=\"fa fa-user p-2\"></span>\n                                    <input formControlName=\"password\" type=\"password\" placeholder=\"New Password\">\n                                </div>\n                                <small *ngIf=\"resetPasswordForm.controls['password'].dirty && resetPasswordForm.hasError('required','password')\" class=\"text-danger\">*Password is required</small>\n\n                            </div>\n                            <div class=\"form-group p-3\">\n                                <div class=\"input-field\" [class.error]=\"resetPasswordForm.controls['confirmPassword'].dirty && resetPasswordForm.hasError('required','confirmPassword')\">\n                                    <span class=\"fa fa-user p-2\"></span>\n                                    <input formControlName=\"confirmPassword\" type=\"password\" placeholder=\"Confirm Password\">\n                                </div>\n                                <small *ngIf=\"resetPasswordForm.controls['confirmPassword'].dirty && resetPasswordForm.hasError('required','confirmPassword')\" class=\"text-danger\">*Confirm Password is required</small>\n                                <small *ngIf=\"resetPasswordForm.hasError('confirmPasswordValidator','confirmPassword')\" class=\"text-danger\">*Password does not match</small>\n\n                            </div>\n                            \n                            <button (click)=\"reset()\" type=\"submit\" class=\"btn btn-primary btn-block mt-4 w-12\">Reset</button>\n                         </form>\n                    </div>\n\n                </div>\n\n            </div>\n\n\n        </div>\n\n    </div>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}