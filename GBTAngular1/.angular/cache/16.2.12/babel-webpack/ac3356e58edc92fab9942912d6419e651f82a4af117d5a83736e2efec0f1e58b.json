{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = \"https://localhost:7219/\";\n    this.voznjeUrl = \"https://localhost:7219/Voznja/\";\n    this.staniceUrl = \"https://localhost:7219/Stanica/\";\n    this.ticketUrl = 'https://localhost:7219/Karta/';\n  }\n  getUsers() {\n    return this.http.get(this.baseUrl);\n  }\n  // getStaniceById(vm: any): Observable<any[]> {\n  //   return this.http.get<any[]>(`${this.staniceUrl}GetStaniceById`, vm);\n  // }\n  getTicketsByUserId(userId) {\n    const url = `${this.ticketUrl}GetByKorisnikId/${userId}`;\n    return this.http.get(url);\n  }\n  getStaniceById(startId, isStartDestination) {\n    const vm = {\n      id: startId,\n      IsStartDestination: isStartDestination\n    };\n    return this.http.get(`${this.baseUrl}GetStaniceById`, {\n      params: vm\n    });\n  }\n  getStanice() {\n    return this.http.get(`${this.staniceUrl}GetStanice`);\n  }\n  getVoznjeInfo(datumPolaska, polaznaStanica, povratnaStanica) {\n    const polaznaStanicaStr = polaznaStanica.toString();\n    const povratnaStanicaStr = povratnaStanica.toString();\n    const params = {\n      datumPolaska: datumPolaska,\n      polaznaStanica: polaznaStanicaStr,\n      povratnaStanica: povratnaStanicaStr\n    };\n    return this.http.get(`${this.voznjeUrl}GetVoznjeInfo`, {\n      params\n    });\n  }\n  static #_ = this.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["ApiService","constructor","http","baseUrl","voznjeUrl","staniceUrl","ticketUrl","getUsers","get","getTicketsByUserId","userId","url","getStaniceById","startId","isStartDestination","vm","id","IsStartDestination","params","getStanice","getVoznjeInfo","datumPolaska","polaznaStanica","povratnaStanica","polaznaStanicaStr","toString","povratnaStanicaStr","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/melissa/Desktop/GBTfinalni/GBTFIT/GBTAngular1/src/app/services/api.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  private baseUrl:string=\"https://localhost:7219/\";\n  private voznjeUrl:string=\"https://localhost:7219/Voznja/\";\n  private staniceUrl:string=\"https://localhost:7219/Stanica/\";\n  private ticketUrl = 'https://localhost:7219/Karta/'; \n\n  constructor(private http:HttpClient) { }\n\n  getUsers(){\n   return this.http.get<any>(this.baseUrl);\n  }\n\n\n// getStaniceById(vm: any): Observable<any[]> {\n//   return this.http.get<any[]>(`${this.staniceUrl}GetStaniceById`, vm);\n// }\ngetTicketsByUserId(userId: number): Observable<any[]> {\n  const url = `${this.ticketUrl}GetByKorisnikId/${userId}`;\n  return this.http.get<any[]>(url);\n}\n\ngetStaniceById(startId: number, isStartDestination: boolean): Observable<any[]> {\n  const vm = { id: startId, IsStartDestination: isStartDestination };\n\n  return this.http.get<any[]>(`${this.baseUrl}GetStaniceById`, { params: vm });\n}\ngetStanice(): Observable<any[]> {\n  return this.http.get<any[]>(`${this.staniceUrl}GetStanice`);\n}\ngetVoznjeInfo(datumPolaska:string, polaznaStanica:number,povratnaStanica:number): Observable<any[]> {\n\n  const polaznaStanicaStr = polaznaStanica.toString();\n  const povratnaStanicaStr = povratnaStanica.toString();\n\n  const params = {\n    datumPolaska: datumPolaska,\n    polaznaStanica: polaznaStanicaStr,\n    povratnaStanica: povratnaStanicaStr\n  };\n\n  return this.http.get<any[]>(`${this.voznjeUrl}GetVoznjeInfo`, { params });\n}\n\n}\n"],"mappings":";;AAOA,OAAM,MAAOA,UAAU;EAMrBC,YAAoBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;IALhB,KAAAC,OAAO,GAAQ,yBAAyB;IACxC,KAAAC,SAAS,GAAQ,gCAAgC;IACjD,KAAAC,UAAU,GAAQ,iCAAiC;IACnD,KAAAC,SAAS,GAAG,+BAA+B;EAEZ;EAEvCC,QAAQA,CAAA;IACP,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAM,IAAI,CAACL,OAAO,CAAC;EACxC;EAGF;EACA;EACA;EACAM,kBAAkBA,CAACC,MAAc;IAC/B,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,SAAS,mBAAmBI,MAAM,EAAE;IACxD,OAAO,IAAI,CAACR,IAAI,CAACM,GAAG,CAAQG,GAAG,CAAC;EAClC;EAEAC,cAAcA,CAACC,OAAe,EAAEC,kBAA2B;IACzD,MAAMC,EAAE,GAAG;MAAEC,EAAE,EAAEH,OAAO;MAAEI,kBAAkB,EAAEH;IAAkB,CAAE;IAElE,OAAO,IAAI,CAACZ,IAAI,CAACM,GAAG,CAAQ,GAAG,IAAI,CAACL,OAAO,gBAAgB,EAAE;MAAEe,MAAM,EAAEH;IAAE,CAAE,CAAC;EAC9E;EACAI,UAAUA,CAAA;IACR,OAAO,IAAI,CAACjB,IAAI,CAACM,GAAG,CAAQ,GAAG,IAAI,CAACH,UAAU,YAAY,CAAC;EAC7D;EACAe,aAAaA,CAACC,YAAmB,EAAEC,cAAqB,EAACC,eAAsB;IAE7E,MAAMC,iBAAiB,GAAGF,cAAc,CAACG,QAAQ,EAAE;IACnD,MAAMC,kBAAkB,GAAGH,eAAe,CAACE,QAAQ,EAAE;IAErD,MAAMP,MAAM,GAAG;MACbG,YAAY,EAAEA,YAAY;MAC1BC,cAAc,EAAEE,iBAAiB;MACjCD,eAAe,EAAEG;KAClB;IAED,OAAO,IAAI,CAACxB,IAAI,CAACM,GAAG,CAAQ,GAAG,IAAI,CAACJ,SAAS,eAAe,EAAE;MAAEc;IAAM,CAAE,CAAC;EAC3E;EAAC,QAAAS,CAAA,G;qBAzCY3B,UAAU,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAVhC,UAAU;IAAAiC,OAAA,EAAVjC,UAAU,CAAAkC,IAAA;IAAAC,UAAA,EAFT;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}